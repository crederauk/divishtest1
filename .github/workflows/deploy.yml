name: 'Deploy AWS S3 Bucket'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
      awsRegion:
        description: 'AWS Region for the bucket'
        required: true
      action:
        description: 'Action to perform (plan/apply/destroy)'
        required: true
permissions:
  id-token: write
  contents: write

jobs:
  plan:
    name: run Terraform Plan
    runs-on: ubuntu-latest

    # Only run this job if the action input is "plan"
    if: github.event.inputs.action == 'plan'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure Git to use PAT for private TF modules
      
      run: |
        git config --global url."https://${{ secrets.TERRAFORM_GH_PAT_TOKEN }}@github.com/".insteadOf "https://github.com/"
      

    - name: Configure AWS credentials
      id: creds
      uses: aws-actions/configure-aws-credentials@v4
      with:
        
        aws-region: ${{ github.event.inputs.awsRegion }}
        role-to-assume: ${{ secrets.AWS_NON_PROD_IDP_TERRAFORM_ROLE }}
        role-session-name: ${{ github.run_id }}
        

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: .
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: .
      run: terraform fmt -check    

    - name: Terraform Plan
      working-directory: .
      run: terraform plan

  apply:
    name: run Terraform Apply
    runs-on: ubuntu-latest

    # Only run this job if the action input is "apply"
    if: github.event.inputs.action == 'apply'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Git to use PAT for private TF modules
        
        run: |
          git config --global url."https://${{ secrets.TERRAFORM_GH_PAT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          
          aws-region: ${{ github.event.inputs.awsRegion }}
          role-to-assume: ${{ secrets.AWS_NON_PROD_IDP_TERRAFORM_ROLE }}
          role-session-name: ${{ github.run_id }}
          

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: .
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        working-directory: .
        run: terraform fmt -check

      # - name: Terraform Plan
      #   working-directory: .
      #   run: terraform plan -out "tflan"

      - name: Terraform Apply
        working-directory: .
        run: terraform apply -auto-approve -input=false

  destroy:
    name: run Terraform Destroy
    runs-on: ubuntu-latest

    # Only run this job if the action input is "destroy"
    if: github.event.inputs.action == 'destroy'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Git to use PAT for private TF modules
        
        run: |
          git config --global url."https://${{ secrets.TERRAFORM_GH_PAT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          
          aws-region: ${{ github.event.inputs.awsRegion }}
          role-to-assume: ${{ secrets.AWS_NON_PROD_IDP_TERRAFORM_ROLE }}
          role-session-name: ${{ github.run_id }}
          

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: .
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        working-directory: .
        run: terraform fmt -check

      - name: Terraform Destroy
        working-directory: .
        run: terraform destroy -auto-approve
